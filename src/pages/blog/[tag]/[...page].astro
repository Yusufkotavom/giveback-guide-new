---

import { getCollection } from "astro:content";
import MainLayout from "../../../layouts/MainLayout.astro";
import type { GetStaticPathsOptions } from "astro";
import PostCard from "../../../components/PostCard.astro";
import BTagsDropdown from "../../../components/BTagsDropdown.astro";

// Helper function to parse dates in dd/mm/yyyy format
function parseDate(dateStr: string): Date {
  const [day, month, year] = dateStr.split('/');
  return new Date(`${year}-${month}-${day}`);
}

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  // Fetch posts from both Notion and MDX collections
  const notionPosts = await getCollection("posts");
  const mdxPosts = await getCollection("postsMdx");

  // Normalize Notion posts to match expected structure
  const normalizedNotionPosts = notionPosts.map((entry) => ({
    ...entry,
    source: 'notion',
    data: {
      ...entry.data,
      properties: {
        ...entry.data.properties,
        bCoverImage: entry.data.properties.bCoverImage || "",
      },
    },
  }));

  // Normalize MDX posts to match Notion structure
  const normalizedMdxPosts = mdxPosts.map((entry) => ({
    ...entry,
    source: 'mdx',
    data: {
      ...entry.data,
      properties: {
        bTitle: entry.data.title,
        bTags: entry.data.tags,
        bSlug: entry.data.slug,
        bCoverImage: entry.data.coverImage || "",
        bPublished: { start: entry.data.published },
        bLastUpdated: entry.data.lastUpdated ? { start: entry.data.lastUpdated } : { start: entry.data.published },
        bDescription: entry.data.description,
      },
    },
  }));

  // Combine both collections
  const allPosts = [...normalizedNotionPosts, ...normalizedMdxPosts];

  // Extract unique tags from all posts
  const tags = new Set(
    allPosts.flatMap((post) =>
      Array.isArray(post.data.properties.bTags)
        ? post.data.properties.bTags
        : [post.data.properties.bTags as string]
    )
  );

  // Generate paginated paths for each tag
  const paths = [];
  for (const tag of tags) {
    const filteredPosts = allPosts.filter((post) =>
      Array.isArray(post.data.properties.bTags)
        ? post.data.properties.bTags.some(
            (c) => c.toLowerCase().replace(/\s+/g, "-") === tag.toLowerCase().replace(/\s+/g, "-")
          )
        : typeof post.data.properties.bTags === "string" &&
          (post.data.properties.bTags as string).toLowerCase().replace(/\s+/g, "-") ===
          tag.toLowerCase().replace(/\s+/g, "-")
    );

    // Sort filtered posts by date
    const sortedFilteredPosts = filteredPosts.sort((a, b) => {
      const dateA = a.data.properties.bPublished?.start 
        ? (typeof a.data.properties.bPublished.start === 'string' 
            ? parseDate(a.data.properties.bPublished.start) 
            : a.data.properties.bPublished.start) 
        : new Date(0);
      const dateB = b.data.properties.bPublished?.start 
        ? (typeof b.data.properties.bPublished.start === 'string' 
            ? parseDate(b.data.properties.bPublished.start) 
            : b.data.properties.bPublished.start) 
        : new Date(0);
      return dateB.getTime() - dateA.getTime(); // Most recent first
    });

    const paginatedPaths = paginate(sortedFilteredPosts, {
      pageSize: 9, // Number of posts per page
      params: { tag: tag.toLowerCase().replace(/\s+/g, "-") },
      props: { tag }, // Pass the tag as a prop
    });

    paths.push(...paginatedPaths);
  }

  return paths;
}

const { tag } = Astro.params; // Get the current tag from the URL
const { page } = Astro.props; // Get the paginated data

// Convert the tag slug back to a readable format
const readableTag = tag
  .split("-")
  .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
  .join(" ");
---

<MainLayout title={`Posts in ${readableTag} - Page ${page.currentPage} of ${page.lastPage}`}>
  <section class="bg-white dark:bg-gray-900">
    <div class="py-8 px-4 mx-auto max-w-screen-xl sm:py-16 lg:px-6">
      <div class="max-w-screen-md mb-8 lg:mb-16">
        <h1
          class="mb-4 text-4xl tracking-tight font-extrabold text-gray-900 dark:text-white"
        >
          {readableTag}
        </h1>
        <p class="text-gray-500 sm:text-xl dark:text-gray-400">
          All of our blog posts that have the <span class="italic">{readableTag}</span> tag.
        </p>
      </div>
      <div class="flex flex-col items-start justify-between p-2 space-y-3 flex-row space-y-0 mb-4">
        <div ><span class="text-sm font-normal text-gray-500 dark:text-gray-400"
          >Showing <span class="font-semibold text-gray-900 dark:text-white"
            >{page.start + 1}-{page.end + 1}</span
          > of <span class="font-semibold text-gray-900 dark:text-white"
            >{page.total}</span
          > posts</span
        ></div>
        <div id="3" class="w-1/2 md:w-1/4 p-2 order-2 md:order-3"><BTagsDropdown /></div>
    </div>
      <div
        class="space-y-8 md:grid md:grid-cols-2 lg:grid-cols-3 md:gap-12 md:space-y-0"
      >
        {page.data.map((post) => (
          <PostCard post={post} />
        ))}
      </div>
    </div>
  </section>

  <!-- Pagination -->
  <section class="bg-white dark:bg-gray-900">
    <div class="py-8 px-4 mx-auto max-w-screen-xl sm:py-16 lg:px-6">
      <nav class="flex justify-center items-center space-x-1">
        {page.url.prev && (
          <a
            href={page.url.prev}
            class="flex items-center justify-center px-3 h-8 ml-0 leading-tight text-gray-500 bg-white border border-gray-300 rounded-l-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
          >
            Previous
          </a>
        )}
        
        {Array.from({ length: page.lastPage }, (_, i) => i + 1).map((pageNum) => (
          <a
            href={pageNum === 1 ? `/blog/${tag}/` : `/blog/${tag}/${pageNum}/`}
            class={`flex items-center justify-center px-3 h-8 leading-tight border ${
              pageNum === page.currentPage
                ? 'text-blue-600 bg-blue-50 border-blue-300 hover:bg-blue-100 hover:text-blue-700 dark:border-gray-700 dark:bg-gray-700 dark:text-white'
                : 'text-gray-500 bg-white border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'
            }`}
          >
            {pageNum}
          </a>
        ))}
        
        {page.url.next && (
          <a
            href={page.url.next}
            class="flex items-center justify-center px-3 h-8 leading-tight text-gray-500 bg-white border border-gray-300 rounded-r-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
          >
            Next
          </a>
        )}
      </nav>
    </div>
  </section>
</MainLayout>