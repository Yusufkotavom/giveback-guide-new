---
import { type CollectionEntry, getCollection, render } from 'astro:content';
import PostLayout from '../../layouts/PostLayout.astro';

export async function getStaticPaths() {
	// Get posts from both Notion and MDX collections
	const notionPosts = await getCollection('posts');
	const mdxPosts = await getCollection('postsMdx');
	
	// Map Notion posts (existing format)
	const notionPaths = notionPosts.map((post) => ({
		params: { slug: post.data.properties.bSlug },
		props: { post, source: 'notion' },
	}));
	
	// Map MDX posts (new format)
	const mdxPaths = mdxPosts.map((post) => ({
		params: { slug: post.data.slug },
		props: { post, source: 'mdx' },
	}));
	
	return [...notionPaths, ...mdxPaths];
}

type Props = {
	post: CollectionEntry<'posts'> | CollectionEntry<'postsMdx'>;
	source: 'notion' | 'mdx';
};

const { post, source } = Astro.props;
const { Content } = await render(post);

// Best-effort description and word count for MDX
let mdxDescription: string | undefined = undefined;
let wordCount: number | undefined = undefined;
if (source === 'mdx') {
  const body: string | undefined = (post as any).body;
  if (body && typeof body === 'string') {
    const plain = body.replace(/```[\s\S]*?```/g, ' ').replace(/`[^`]*`/g, ' ').replace(/[#>*_\-]|\[(.*?)\]\((.*?)\)/g, ' ').replace(/\s+/g, ' ').trim();
    mdxDescription = post.data.description || plain.slice(0, 155);
    wordCount = plain.split(/\s+/).filter(Boolean).length;
  } else {
    mdxDescription = (post as any).data?.description;
  }
}

// Normalize data structure for the layout
const layoutData = source === 'notion' 
	? {
		...post.data,
		title: post.data.properties.bTitle,
		tags: post.data.properties.bTags,
		slug: post.data.properties.bSlug,
		coverImage: post.data.properties.bCoverImage,
		published: post.data.properties.bPublished,
		lastUpdated: post.data.properties.bLastUpdated,
		description: post.data.properties.bDescription,
		properties: {
			bTitle: post.data.properties.bTitle,
			bTags: post.data.properties.bTags,
			bSlug: post.data.properties.bSlug,
			bCoverImage: post.data.properties.bCoverImage,
			bPublished: post.data.properties.bPublished,
			bLastUpdated: post.data.properties.bLastUpdated,
			bDescription: post.data.properties.bDescription,
		}
	}
	: {
		...post.data,
		description: mdxDescription || post.data.description,
		properties: {
			bTitle: post.data.title,
			bTags: post.data.tags,
			bSlug: post.data.slug,
			bCoverImage: post.data.coverImage,
			bPublished: { start: post.data.published },
			bLastUpdated: { start: post.data.lastUpdated || post.data.published },
			bDescription: mdxDescription || post.data.description,
		},
	};
---

<PostLayout {...layoutData} wordCount={wordCount}>
	<Content />
</PostLayout>