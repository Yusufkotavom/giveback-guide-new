---
import { type CollectionEntry, getCollection } from 'astro:content';
import PostLayout from '../../layouts/PostLayout.astro';
import { render } from 'astro:content';

export async function getStaticPaths() {
	// Get posts from both Notion and MDX collections
	const notionPosts = await getCollection('posts');
	const mdxPosts = await getCollection('postsMdx');
	
	// Map Notion posts (existing format)
	const notionPaths = notionPosts.map((post) => ({
		params: { slug: post.data.properties.bSlug },
		props: { post, source: 'notion' },
	}));
	
	// Map MDX posts (new format)
	const mdxPaths = mdxPosts.map((post) => ({
		params: { slug: post.data.slug },
		props: { post, source: 'mdx' },
	}));
	
	return [...notionPaths, ...mdxPaths];
}

type Props = {
	post: CollectionEntry<'posts'> | CollectionEntry<'postsMdx'>;
	source: 'notion' | 'mdx';
};

const { post, source } = Astro.props;
const { Content } = await render(post);

// Normalize data structure for the layout
const layoutData = source === 'notion' 
	? {
		...post.data,
		title: post.data.properties.bTitle,
		tags: post.data.properties.bTags,
		slug: post.data.properties.bSlug,
		coverImage: post.data.properties.bCoverImage,
		published: post.data.properties.bPublished,
		lastUpdated: post.data.properties.bLastUpdated,
		description: post.data.properties.bDescription,
	}
	: {
		...post.data,
		properties: {
			bTitle: post.data.title,
			bTags: post.data.tags,
			bSlug: post.data.slug,
			bCoverImage: post.data.coverImage,
			bPublished: post.data.published,
			bLastUpdated: post.data.lastUpdated,
			bDescription: post.data.description,
		}
	};
---

<PostLayout {...layoutData}>
	<Content />
</PostLayout>