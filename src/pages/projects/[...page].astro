---
import { getCollection } from "astro:content";
import MainLayout from "../../layouts/MainLayout.astro";
import type { GetStaticPathsOptions } from "astro";
import ProjectCard from "../../components/ProjectCard.astro";
import PCategoryDropdown from "../../components/PCategoryDropdown.astro";

// Helper function to parse dates in dd/mm/yyyy format
function parseDate(dateStr: string): Date {
  const [day, month, year] = dateStr.split('/');
  return new Date(`${year}-${month}-${day}`);
}

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  // Fetch projects from both Notion and MDX collections
  const notionProjects = await getCollection('projects');
  const mdxProjects = await getCollection('projectsMdx');

  // Normalize Notion projects (existing format)
  const normalizedNotionProjects = notionProjects.map((entry) => ({
    ...entry,
    source: 'notion',
    data: {
      ...entry.data,
      properties: {
        ...entry.data.properties,
      },
    },
  }));

  // Normalize MDX projects to match Notion structure
  const normalizedMdxProjects = mdxProjects.map((entry) => ({
    ...entry,
    source: 'mdx',
    data: {
      ...entry.data,
      properties: {
        pTitle: entry.data.title,
        pCategory: entry.data.category,
        pSlug: entry.data.slug,
        pImageURL: entry.data.imageUrl || "",
        pPublished: { start: entry.data.published },
        pCountry: entry.data.country,
        pLocale: entry.data.locale,
        pOrganiser: entry.data.organiser,
        pCost: entry.data.cost,
        pURL: entry.data.url,
        pGYGURL: entry.data.gygUrl,
        pMapsURL: entry.data.mapsUrl,
        pVerify: entry.data.verify || "",
        pReview: entry.data.review,
        pGetInvolved: entry.data.getInvolved,
      },
    },
  }));

  // Combine both collections
  const allProjects = [...normalizedNotionProjects, ...normalizedMdxProjects];

  // Sort projects by pPublished date (descending order)
  const sortedEntries = allProjects.sort((a, b) => {
    const dateA = a.data.properties.pPublished?.start 
      ? (typeof a.data.properties.pPublished.start === 'string' 
          ? parseDate(a.data.properties.pPublished.start) 
          : a.data.properties.pPublished.start) 
      : new Date(0);
    const dateB = b.data.properties.pPublished?.start 
      ? (typeof b.data.properties.pPublished.start === 'string' 
          ? parseDate(b.data.properties.pPublished.start) 
          : b.data.properties.pPublished.start) 
      : new Date(0);
    return dateB.getTime() - dateA.getTime(); // Most recent first
  });

  return paginate(sortedEntries, {
    pageSize: 9, // Number of entries per page
  });
}

const { page } = Astro.props;
---

<MainLayout
  title={`All Projects - Page ${page.currentPage} of ${page.lastPage}`}
>
  <section class="bg-white dark:bg-gray-900">
    <div class="py-8 px-4 mx-auto max-w-screen-xl sm:py-16 lg:px-6">
      <div class="max-w-screen-md mb-8 lg:mb-16">
        <h1
          class="mb-4 text-4xl tracking-tight font-extrabold text-gray-900 dark:text-white"
        >
          Portfolio Projects
        </h1>
        <p class="text-gray-500 sm:text-xl dark:text-gray-400">
          Showcase proyek IT profesional yang telah berhasil kami kerjakan untuk berbagai klien dan industri.
        </p>
      </div>

      <div class="flex flex-col md:flex-row mb-5">
        <!-- Div 1 (Showing projects) -->
        <div id="1" class="w-full md:w-3/4 p-2 order-3 md:order-1">
          <span class="text-sm font-normal text-gray-500 dark:text-gray-400">
            Menampilkan <span class="font-semibold text-gray-900 dark:text-white">
              {page.start + 1}-{page.end + 1}
            </span> dari <span class="font-semibold text-gray-900 dark:text-white">
              {page.total}
            </span> proyek
          </span>
        </div>
      
        <!-- Div 3 (Category Dropdown) -->
        <div id="3" class="w-full md:w-1/4 p-2 order-2 md:order-3">
          <PCategoryDropdown />
        </div>
      </div>

      <div
        class="space-y-8 md:grid md:grid-cols-2 lg:grid-cols-3 md:gap-12 md:space-y-0"
      >
        {page.data.map((project) => <ProjectCard project={project} />)}
      </div>
    </div>
  </section>
  <section class="bg-white dark:bg-gray-900">
    <div class="py-8 px-4 mx-auto max-w-screen-xl sm:py-16 lg:px-6">
      <div class="flex justify-center items-center">
        <!-- Previous Button -->
        {
          page.url.prev && (
            <a
              href={page.url.prev}
              class="flex items-center justify-center px-4 h-10 me-3 text-base font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
            >
              <svg
                class="w-3.5 h-3.5 me-2 rtl:rotate-180"
                aria-hidden="true"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 14 10"
              >
                <path
                  stroke="currentColor"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M13 5H1m0 0 4 4M1 5l4-4"
                />
              </svg>
              Previous
            </a>
          )
        }

        <!-- Next Button -->
        {
          page.url.next && (
            <a
              href={page.url.next}
              class="flex items-center justify-center px-4 h-10 text-base font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
            >
              Next
              <svg
                class="w-3.5 h-3.5 ms-2 rtl:rotate-180"
                aria-hidden="true"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 14 10"
              >
                <path
                  stroke="currentColor"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M1 5h12m0 0L9 1m4 4L9 9"
                />
              </svg>
            </a>
          )
        }
      </div>
    </div>
  </section>
</MainLayout>
