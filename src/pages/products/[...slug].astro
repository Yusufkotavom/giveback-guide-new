---
import { type CollectionEntry, getCollection } from 'astro:content';
import ProductPage from '../../layouts/ProductPage.astro';
import { render } from 'astro:content';

export async function getStaticPaths() {
	// Safely get products from both Notion and MDX collections
	let notionProducts = [];
	let mdxProducts = [];
	
	try {
		notionProducts = await getCollection('products');
	} catch (e) {
		console.warn("Products collection not available:", e.message);
	}
	
	try {
		mdxProducts = await getCollection('productsMdx');
	} catch (e) {
		console.warn("ProductsMdx collection not available:", e.message);
	}
	
	// Map Notion products (existing format)
	const notionPaths = notionProducts.map((product) => ({
		params: { slug: product.data.properties.pSlug },
		props: { product, source: 'notion' },
	}));
	
	// Map MDX products (new format)
	const mdxPaths = mdxProducts.map((product) => ({
		params: { slug: product.data.slug },
		props: { product, source: 'mdx' },
	}));
	
	return [...notionPaths, ...mdxPaths];
}

type Props = {
	product: CollectionEntry<'products'> | CollectionEntry<'productsMdx'>;
	source: 'notion' | 'mdx';
};

const { product, source } = Astro.props;
const { Content } = await render(product);

// Normalize data structure for the layout with all affiliate fields
const layoutData = source === 'notion' 
	? {
		...product.data,
		title: product.data.properties.pTitle,
		price: product.data.properties.pPrice,
		country: product.data.properties.pCountry,
		locale: product.data.properties.pLocale,
		category: product.data.properties.pCategory,
		features: product.data.properties.pFeatures,
		name: product.data.properties.pName,
		type: product.data.properties.pType,
		slug: product.data.properties.pSlug,
		url: product.data.properties.pURL,
		otherUrl: product.data.properties.pOtherURL,
		tokopediaUrl: product.data.properties.pTokopediaURL,
		shopeeUrl: product.data.properties.pShopeeURL,
		blibliUrl: product.data.properties.pBlibliURL,
		bukalapakUrl: product.data.properties.pBukalapakURL,
		lazadaUrl: product.data.properties.pLazadaURL,
		mapsUrl: product.data.properties.pMapsURL,
		verify: product.data.properties.pVerify,
		imageUrl1: product.data.properties.pImageURL1,
		imageUrl2: product.data.properties.pImageURL2,
		imageUrl3: product.data.properties.pImageURL3,
		published: product.data.properties.pPublished,
		review: product.data.properties.pReview,
		// New affiliate fields
		affiliateCode: product.data.properties.pAffiliateCode,
		commissionRate: product.data.properties.pCommissionRate,
		affiliateProvider: product.data.properties.pAffiliateProvider,
		discountCode: product.data.properties.pDiscountCode,
		specialOffer: product.data.properties.pSpecialOffer,
		ctaText: product.data.properties.pCTAText,
		priority: product.data.properties.pPriority,
		externalRating: product.data.properties.pExternalRating,
		soldCount: product.data.properties.pSoldCount,
		originalPrice: product.data.properties.pOriginalPrice,
		isSponsored: product.data.properties.pIsSponsored,
		targetAudience: product.data.properties.pTargetAudience,
	}
	: {
		...product.data,
		properties: {
			pTitle: product.data.title,
			pPrice: product.data.price,
			pCountry: product.data.country,
			pLocale: product.data.locale,
			pCategory: product.data.category,
			pSlug: product.data.slug,
			pImageURL1: product.data.imageUrl || "",
			pPublished: { start: product.data.published },
			pDescription: product.data.description,
			pVerify: "",
			pImageURL2: "",
			pImageURL3: "",
			pReview: "",
			// Set empty values for fields not in MDX schema
			pFeatures: [],
			pName: "",
			pType: [],
			pURL: "",
			pOtherURL: "",
			pTokopediaURL: "",
			pShopeeURL: "",
			pBlibliURL: "",
			pBukalapakURL: "",
			pLazadaURL: "",
			pMapsURL: "",
			// New affiliate fields (empty for MDX)
			pAffiliateCode: "",
			pCommissionRate: "",
			pAffiliateProvider: "",
			pDiscountCode: "",
			pSpecialOffer: "",
			pCTAText: "",
			pPriority: "",
			pExternalRating: "",
			pSoldCount: "",
			pOriginalPrice: "",
			pIsSponsored: false,
			pTargetAudience: [],
		}
	};
---

<ProductPage {...layoutData}>
	<Content />
</ProductPage>