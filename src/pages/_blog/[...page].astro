---
import { getCollection } from "astro:content";
import MainLayout from "../../layouts/MainLayout.astro";
import type { GetStaticPathsOptions } from "astro";
import BCategoryDropdown from "../../components/BCategoryDropdown.astro";

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  // Get posts from both Notion and MDX collections
  const notionPosts = await getCollection("posts");
  const mdxPosts = await getCollection("postsMdx");

  // Normalize Notion posts
  const normalizedNotionPosts = notionPosts.map((post) => ({
    ...post,
    source: 'notion',
    slug: post.data.properties.bSlug,
    data: {
      ...post.data,
      title: post.data.properties.bTitle,
      coverImage: post.data.properties.bCoverImage,
      published: post.data.properties.bPublished?.start || new Date(),
      description: post.data.properties.bDescription,
    },
  }));

  // Normalize MDX posts
  const normalizedMdxPosts = mdxPosts.map((post) => ({
    ...post,
    source: 'mdx',
    slug: post.data.slug,
    data: {
      ...post.data,
      title: post.data.title,
      coverImage: post.data.coverImage,
      published: post.data.published,
      description: post.data.description,
    },
  }));

  // Combine both collections
  const allPosts = [...normalizedNotionPosts, ...normalizedMdxPosts];

  // Sort entries by date in descending order
  const sortedEntries = allPosts.sort((a, b) => {
    const dateA = a.data.published instanceof Date ? a.data.published : new Date(a.data.published);
    const dateB = b.data.published instanceof Date ? b.data.published : new Date(b.data.published);
    return dateB.getTime() - dateA.getTime(); // Newest first
  });

  // Paginate the sorted entries
  return paginate(sortedEntries, {
    pageSize: 9, // the number of entries per page
  });
}

const { page } = Astro.props;
---

<MainLayout title={`All Blog Posts - Page ${page.currentPage} of ${page.lastPage}`}>
  <section class="bg-white dark:bg-gray-900">
    <div class="py-8 px-4 mx-auto max-w-screen-xl sm:py-16 lg:px-6">
      <div class="max-w-screen-md mb-8 lg:mb-16">
        <h1
          class="mb-4 text-4xl tracking-tight font-extrabold text-gray-900 dark:text-white"
        >
          Blog Posts
        </h1>
        <p class="text-gray-500 sm:text-xl dark:text-gray-400">
          All of our travel guides and articles.
        </p>
      </div>
      <div class="flex flex-col items-start justify-between p-2 space-y-3 flex-row space-y-0 mb-4">
        <div ><span class="text-sm font-normal text-gray-500 dark:text-gray-400"
          >Showing <span class="font-semibold text-gray-900 dark:text-white"
            >{page.start + 1}-{page.end + 1}</span
          > of <span class="font-semibold text-gray-900 dark:text-white"
            >{page.total}</span
          > posts</span
        ></div>
        <div ><BCategoryDropdown /></div>
    </div>
      <div
        class="space-y-8 md:grid md:grid-cols-2 lg:grid-cols-3 md:gap-12 md:space-y-0"
      >
        {
          page.data.map((post) => (
            <article>
              <a href={`/blog/${post.slug}/`}>
                <img
                  src={post.data.coverImage}
                  class="mb-5 rounded-lg"
                  alt={post.data.title}
                />
              </a>
              <h2 class="mb-2 text-xl font-bold leading-tight text-gray-900 dark:text-white">
                <a href={`/blog/${post.slug}/`}>{post.data.title}</a>
              </h2>
              <p class="mb-4 text-gray-500 dark:text-gray-400">
                {post.data.description}
              </p>
            </article>
          ))
        }
      </div>
    </div>
  </section>
    <!-- Pagination -->
    <section class="bg-white dark:bg-gray-900">
      <div class="py-8 px-4 mx-auto max-w-screen-xl sm:py-16 lg:px-6">
        <div class="flex justify-center items-center">
          <!-- Previous Button -->
          {
              page.url.prev ? (
          <a href={page.url.prev} class="flex items-center justify-center px-4 h-10 me-3 text-base font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">
            <svg class="w-3.5 h-3.5 me-2 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 5H1m0 0 4 4M1 5l4-4"/>
            </svg>
            Previous
          </a>
          ) : null
        }
          {
              page.url.next ? (
          <a href={page.url.next} class="flex items-center justify-center px-4 h-10 text-base font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">
            Next
            <svg class="w-3.5 h-3.5 ms-2 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5h12m0 0L9 1m4 4L9 9"/>
            </svg>
          </a>
          ) : null
        }
        </div>
      </div>
    </section>
</MainLayout>
