---
import { getCollection } from 'astro:content';
import MainLayout from '../../layouts/MainLayout.astro';
import ServiceCard from '../../components/ServiceCard.astro';

// Fetch services from both Notion and MDX collections
const notionServices = await getCollection('services');
const mdxServices = await getCollection('servicesMdx');

// Normalize Notion services (existing format)
const normalizedNotionServices = notionServices.map((entry) => ({
  ...entry,
  source: 'notion',
  data: {
    ...entry.data,
    properties: {
      ...entry.data.properties,
      svImageURL1: entry.data.properties.svImageURL1 || "",
      svVerify: entry.data.properties.svVerify || "",
    },
  },
}));

// Normalize MDX services to match Notion structure
const normalizedMdxServices = mdxServices.map((entry) => ({
  ...entry,
  source: 'mdx',
  data: {
    ...entry.data,
    properties: {
      svTitle: entry.data.title,
      svCategory: entry.data.category,
      svSlug: entry.data.slug,
      svImageURL1: entry.data.imageUrl1 || "",
      svPublished: { start: entry.data.published },
      svWilayah: entry.data.wilayah,
      svProvider: entry.data.provider,
      svType: entry.data.type,
      svPrice: entry.data.price,
      svURL: entry.data.url,
      svWhatsAppURL: entry.data.whatsappUrl,
      svMapsURL: entry.data.mapsUrl,
      svVerify: entry.data.verify || "",
      svImageURL2: entry.data.imageUrl2,
      svImageURL3: entry.data.imageUrl3,
      svReview: entry.data.review,
    },
  },
}));

// Combine both collections
const entries = [...normalizedNotionServices, ...normalizedMdxServices];

const url = new URL(Astro.request.url);
const activeCategory = url.searchParams.get('category');

const categories = Array.from(
  new Set(
    entries.flatMap((e) => {
      const c = e.data.properties.svCategory as any;
      return Array.isArray(c) ? c : (c ? [c] : []);
    })
  )
).sort();

const filtered = activeCategory
  ? entries.filter((e) => {
      const c = e.data.properties.svCategory as any;
      return Array.isArray(c) ? c.includes(activeCategory) : c === activeCategory;
    })
  : entries;
---

<MainLayout title="Services" description="Temukan layanan yang Anda butuhkan">
  <section class="bg-white dark:bg-gray-900">
    <div class="py-8 px-4 mx-auto max-w-screen-xl sm:py-16 lg:px-6">
      <div class="mb-8">
        <h1 class="mb-4 text-4xl tracking-tight font-extrabold text-gray-900 dark:text-white">Layanan</h1>
        <div class="flex flex-wrap gap-2 items-center">
          <a href="/services" class="px-3 py-1.5 rounded-full text-sm font-medium border border-gray-300 hover:bg-gray-100 dark:border-gray-700 dark:hover:bg-gray-700 {activeCategory ? '' : 'bg-gray-900 text-white dark:bg-gray-200 dark:text-gray-900'}">Semua</a>
          {categories.map((c) => (
            <a href={`?category=${encodeURIComponent(c)}`} class={`px-3 py-1.5 rounded-full text-sm font-medium border border-gray-300 hover:bg-gray-100 dark:border-gray-700 dark:hover:bg-gray-700 ${activeCategory === c ? 'bg-gray-900 text-white dark:bg-gray-200 dark:text-gray-900' : ''}`}>{c}</a>
          ))}
        </div>
      </div>
      <div class="space-y-8 md:grid md:grid-cols-2 lg:grid-cols-3 md:gap-12 md:space-y-0">
        {filtered.map((service) => (
          <ServiceCard service={service} />
        ))}
      </div>
    </div>
  </section>
</MainLayout>