---
import { getCollection } from "astro:content";
import MainLayout from "../../../layouts/MainLayout.astro";
import type { GetStaticPathsOptions } from "astro";
import ServiceCard from "../../../components/ServiceCard.astro";
import SCategoryDropdown from "../../../components/SCategoryDropdown.astro";

// Helper function to parse dates in dd/mm/yyyy format
function parseDate(dateStr: string): Date {
  const [day, month, year] = dateStr.split('/');
  return new Date(`${year}-${month}-${day}`);
}

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  // Fetch services from both Notion and MDX collections
  const notionServices = await getCollection('services');
  const mdxServices = await getCollection('servicesMdx');

  // Normalize Notion services (existing format)
  const normalizedNotionServices = notionServices.map((entry) => ({
    ...entry,
    source: 'notion',
    data: {
      ...entry.data,
      properties: {
        ...entry.data.properties,
        svImageURL1: entry.data.properties.svImageURL1 || "",
        svVerify: entry.data.properties.svVerify || "",
      },
    },
  }));

  // Normalize MDX services to match Notion structure
  const normalizedMdxServices = mdxServices.map((entry) => ({
    ...entry,
    source: 'mdx',
    data: {
      ...entry.data,
      properties: {
        svTitle: entry.data.title,
        svCategory: entry.data.category,
        svSlug: entry.data.slug,
        svImageURL1: entry.data.imageUrl1 || "",
        svPublished: { start: entry.data.published },
        svWilayah: entry.data.wilayah,
        svProvider: entry.data.provider,
        svType: entry.data.type,
        svPrice: entry.data.price,
        svURL: entry.data.url,
        svWhatsAppURL: entry.data.whatsappUrl,
        svMapsURL: entry.data.mapsUrl,
        svVerify: entry.data.verify || "",
        svImageURL2: entry.data.imageUrl2,
        svImageURL3: entry.data.imageUrl3,
        svReview: entry.data.review,
      },
    },
  }));

  // Combine both collections
  const allServices = [...normalizedNotionServices, ...normalizedMdxServices];

  // Extract unique categories
  const categories = Array.from(
    new Set(
      allServices.flatMap((service) =>
        Array.isArray(service.data.properties.svCategory)
          ? service.data.properties.svCategory
          : [service.data.properties.svCategory]
      )
    )
  ).map((category) => category.toLowerCase().replace(/\s+/g, "-"));

  // Generate paginated paths for each category
  const paths = categories.flatMap((category) => {
    const categoryServices = allServices.filter((service) => {
      const serviceCategories = Array.isArray(service.data.properties.svCategory)
        ? service.data.properties.svCategory.map((c) =>
            c.toLowerCase().replace(/\s+/g, "-")
          )
        : [service.data.properties.svCategory.toLowerCase().replace(/\s+/g, "-")];

      return serviceCategories.includes(category);
    });

    // Sort services by published date (descending order)
    const sortedServices = categoryServices.sort((a, b) => {
      const dateA = a.data.properties.svPublished?.start 
        ? (typeof a.data.properties.svPublished.start === 'string' 
            ? parseDate(a.data.properties.svPublished.start) 
            : a.data.properties.svPublished.start) 
        : new Date(0);
      const dateB = b.data.properties.svPublished?.start 
        ? (typeof b.data.properties.svPublished.start === 'string' 
            ? parseDate(b.data.properties.svPublished.start) 
            : b.data.properties.svPublished.start) 
        : new Date(0);
      return dateB.getTime() - dateA.getTime(); // Most recent first
    });

    return paginate(sortedServices, {
      pageSize: 9, // Number of services per page
      params: { category },
      props: { category }, // Pass category as a prop
    });
  });

  return paths;
}

const { page } = Astro.props;
const { category } = Astro.params;

// Convert URL-friendly category back to display name
const displayCategory = category
  .split('-')
  .map(word => word.charAt(0).toUpperCase() + word.slice(1))
  .join(' ');

// Get readable country name for title
const readableCategory = displayCategory;
---

<MainLayout title={`${readableCategory} Services - Page ${page.currentPage} of ${page.lastPage}`}>
  <section class="bg-white dark:bg-gray-900">
    <div class="py-8 px-4 mx-auto max-w-screen-xl sm:py-16 lg:px-6">
      <div class="max-w-screen-md mb-8 lg:mb-16">
        <h1  
          class="mb-4 text-4xl tracking-tight font-extrabold text-gray-900 dark:text-white"
        >
          Layanan {readableCategory}
        </h1>
        <p class="text-gray-500 sm:text-xl dark:text-gray-400">
          Solusi {readableCategory.toLowerCase()} profesional untuk UMKM dan bisnis di Indonesia.
        </p>
      </div>

      <div class="flex flex-col md:flex-row mb-5">
        <!-- Div 1 (Showing services) -->
        <div id="1" class="w-full md:w-3/4 p-2 order-3 md:order-1">
          <span class="text-sm font-normal text-gray-500 dark:text-gray-400">
            Menampilkan <span class="font-semibold text-gray-900 dark:text-white">
              {page.start + 1}-{page.end + 1}
            </span> dari <span class="font-semibold text-gray-900 dark:text-white">
              {page.total}
            </span> layanan {readableCategory}
          </span>
        </div>
      
        <!-- Div 3 (Category Dropdown) -->
        <div id="3" class="w-full md:w-1/4 p-2 order-2 md:order-3">
          <SCategoryDropdown />
        </div>
      </div>

      <div
        class="space-y-8 md:grid md:grid-cols-2 lg:grid-cols-3 md:gap-12 md:space-y-0"
      >
        {page.data.map((service) => (
          <ServiceCard service={service} />
        ))}
      </div>
    </div>
  </section>

  <!-- Pagination -->
  <section class="bg-white dark:bg-gray-900">
    <div class="py-8 px-4 mx-auto max-w-screen-xl sm:py-16 lg:px-6">
      <div class="flex justify-center items-center">
        <!-- Previous Button -->
        {page.url.prev && (
          <a href={page.url.prev} class="flex items-center justify-center px-4 h-10 me-3 text-base font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">
            <svg class="w-3.5 h-3.5 me-2 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 5H1m0 0 4 4M1 5l4-4"/>
            </svg>
            Previous
          </a>
        )}
        
        <!-- Next Button -->
        {page.url.next && (
          <a href={page.url.next} class="flex items-center justify-center px-4 h-10 text-base font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">
            Next
            <svg class="w-3.5 h-3.5 ms-2 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5h12m0 0L9 1m4 4L9 9"/>
            </svg>
          </a>
        )}
      </div>
    </div>
  </section>
</MainLayout>