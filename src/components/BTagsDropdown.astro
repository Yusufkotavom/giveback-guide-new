---
import { getCollection } from "astro:content";

// Get the current country from the URL
const currentTagPromise = (async () => {
  const pathSegments = Astro.url.pathname.split("/");
  const potentialCountry = pathSegments[2]; // Extract the tag slug from the URL

  // Validate if the extracted segment matches a known country slug
  const posts = await getCollection("posts");
  const validTags = posts.reduce((acc: Set<string>, post) => {
    // Handle both normalized (properties.bTags) and raw MDX (tags) structures
    const tags = post.data.properties?.bTags 
      ? (Array.isArray(post.data.properties.bTags)
          ? post.data.properties.bTags.map((c) =>
              c.toLowerCase().replace(/\s+/g, "-")
            )
          : [String(post.data.properties.bTags).toLowerCase().replace(/\s+/g, "-")])
      : (Array.isArray(post.data.tags)
          ? post.data.tags.map((c) =>
              c.toLowerCase().replace(/\s+/g, "-")
            )
          : [String(post.data.tags).toLowerCase().replace(/\s+/g, "-")]);
    tags.forEach((tag) => acc.add(tag));
    return acc;
  }, new Set<string>());

  return validTags.has(potentialCountry) ? potentialCountry : null;
})();
const currentTag = await currentTagPromise;

const posts = await getCollection("posts");

// Count the number of projects for each country
const tagCounts = posts.reduce((acc: Record<string, number>, post) => {
  // Handle both normalized (properties.bTags) and raw MDX (tags) structures
  const tags = post.data.properties?.bTags 
    ? (Array.isArray(post.data.properties.bTags)
        ? post.data.properties.bTags
        : [post.data.properties.bTags])
    : (Array.isArray(post.data.tags)
        ? post.data.tags
        : [post.data.tags]);

  tags.forEach((tag) => {
    if (tag) {
      acc[tag] = (acc[tag] || 0) + 1;
    }
  });

  return acc;
}, {});

// Extract unique countries and sort alphabetically
const uniqueTags = Object.keys(tagCounts).sort();
---
<form class="w-100%">
  <select
    id="countries"
    class="bg-white border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
    onchange="if (this.value) window.location.href = this.value"
  >
    <option disabled selected={!currentTag}>Categories</option>
    {uniqueTags.map((tag) => {
      const tagSlug = tag.toLowerCase().replace(/\s+/g, "-");
      return (
        <option
          value={`/blog/${tagSlug}`}
          selected={currentTag === tagSlug}
        >
          {tag} ({tagCounts[tag]})
        </option>
      );
    })}
  </select>
</form>