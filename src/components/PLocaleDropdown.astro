---
import { getCollection } from "astro:content";

// Get the current country and locale from the URL
const currentCountry = Astro.url.pathname.split("/")[2]; // Extract the country slug from the URL
const currentLocale = Astro.url.pathname.split("/")[3]; // Extract the locale slug from the URL

const products = await getCollection("products");

// Filter products to include only those that are assigned to the current country
const filteredProducts = products.filter((product) => {
  const countries = Array.isArray(product.data.properties.pCountry)
    ? product.data.properties.pCountry.map((c) =>
        c.toLowerCase().replace(/\s+/g, "-")
      )
    : [String(product.data.properties.pCountry).toLowerCase().replace(/\s+/g, "-")];

  // Ensure the product includes the current country
  return countries.includes(currentCountry);
});

// Count the number of products for each locale within the current country
const localeCounts = filteredProducts.reduce((acc: Record<string, number>, product) => {
  const countries = Array.isArray(product.data.properties.pCountry)
    ? product.data.properties.pCountry.map((c) =>
        c.toLowerCase().replace(/\s+/g, "-")
      )
    : [String(product.data.properties.pCountry).toLowerCase().replace(/\s+/g, "-")];

  const locales = Array.isArray(product.data.properties.pLocale)
    ? product.data.properties.pLocale
    : [product.data.properties.pLocale];

  // Only count locales if the current country is explicitly assigned
  if (countries.includes(currentCountry)) {
    locales.forEach((locale) => {
      if (locale) {
        acc[locale] = (acc[locale] || 0) + 1;
      }
    });
  }

  return acc;
}, {});

// Extract unique locales and sort alphabetically
const uniqueLocales = Object.keys(localeCounts).sort();
---
<form class="w-100%">
  <select
    id="locales"
    class="bg-white border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
    onchange="if (this.value) window.location.href = this.value"
  >
    <option disabled selected={!currentLocale}>Lokasi</option>
    {uniqueLocales.map((locale) => {
      const localeSlug = locale.toLowerCase().replace(/\s+/g, "-");
      return (
        <option
          value={`/products/${currentCountry}/${localeSlug}`}
          selected={currentLocale === localeSlug}
        >
          {locale} ({localeCounts[locale]})
        </option>
      );
    })}
  </select>
</form>