---
// filepath: /Users/matthewmorelli/Documents/Dev/giveback-guide/src/components/Homepage/LatestProducts.astro

import { getCollection } from "astro:content";
import ProductCard from "../ProductCard.astro";
import PCountryDropdown from "../PCountryDropdown.astro";

// Props: limit specifies the number of products to display
interface Props {
  limit: number;
}

const { limit } = Astro.props;

// Helper function to parse dates in dd/mm/yyyy format
function parseDate(dateStr: string): Date {
  const [day, month, year] = dateStr.split("/");
  return new Date(`${year}-${month}-${day}`);
}

// Safely fetch products from both Notion and MDX collections
let notionProducts = [];
let mdxProducts = [];

try {
  notionProducts = await getCollection("products");
} catch (e) {
  console.warn("Products collection not available:", e.message);
}

try {
  mdxProducts = await getCollection("productsMdx");
} catch (e) {
  console.warn("ProductsMdx collection not available:", e.message);
}

// Normalize Notion products to match expected structure
const normalizedNotionProducts = notionProducts.map((entry) => ({
  ...entry,
  source: 'notion',
  data: {
    ...entry.data,
    properties: {
      ...entry.data.properties,
      pImageURL1: entry.data.properties.pImageURL1 || "",
      pVerify: entry.data.properties.pVerify || "",
      pPrice: (entry.data.properties as any).pPrice || "",
    },
  },
}));

// Normalize MDX products to match Notion structure
const normalizedMdxProducts = mdxProducts.map((entry) => ({
  ...entry,
  source: 'mdx',
  data: {
    ...entry.data,
    properties: {
      pTitle: entry.data.title,
      pPrice: entry.data.price,
      pCountry: entry.data.country,
      pLocale: entry.data.locale,
      pCategory: entry.data.category,
      pSlug: entry.data.slug,
      pImageURL1: entry.data.imageUrl || "",
      pPublished: { start: entry.data.published },
      pDescription: entry.data.description,
      pVerify: "",
      pImageURL2: "",
      pImageURL3: "",
      pReview: "",
    },
  },
}));

// Combine both collections
const allProducts = [...normalizedNotionProducts, ...normalizedMdxProducts];

// Sort products by pPublished date (descending order)
const sortedEntries = allProducts.sort((a, b) => {
  const dateA = a.data.properties.pPublished?.start 
    ? (typeof a.data.properties.pPublished.start === 'string' 
        ? parseDate(a.data.properties.pPublished.start) 
        : a.data.properties.pPublished.start) 
    : new Date(0);
  const dateB = b.data.properties.pPublished?.start 
    ? (typeof b.data.properties.pPublished.start === 'string' 
        ? parseDate(b.data.properties.pPublished.start) 
        : b.data.properties.pPublished.start) 
    : new Date(0);
  return dateB.getTime() - dateA.getTime(); // Most recent first
});

// Limit the number of products based on the limit prop
const limitedEntries = sortedEntries.slice(0, limit);

// Debug info
console.log(`LatestProducts: Found ${notionProducts.length} Notion products, ${mdxProducts.length} MDX products, showing ${limitedEntries.length} total`);
---

<section class="bg-white dark:bg-gray-900">
  <div class="py-8 px-4 mx-auto max-w-screen-xl sm:py-16 lg:px-6">
    <div class="flex flex-col items-start justify-between p-2 space-y-3 md:flex-row md:space-y-0 mb-4">
      <div class="max-w-screen-md">
        <h2
          class="mb-4 text-4xl tracking-tight font-extrabold text-gray-900 dark:text-white"
        >
          Produk & Solusi Terbaru
        </h2>
        <p class="text-gray-500 sm:text-xl dark:text-gray-400">
          Hardware, software, dan solusi teknologi terkini untuk mendukung kebutuhan bisnis modern.
        </p>
      </div>
      <div
        id="3"
        class="w-full md:w-1/4 p-2 order-2 md:order-3"
      >
        <PCountryDropdown />
      </div>
    </div>
    
    {limitedEntries.length > 0 ? (
      <div
        class="flex flex-row overflow-x-auto hide-scrollbar space-x-4 md:space-x-0 md:space-y-0 md:grid md:grid-cols-2 lg:grid-cols-3 md:gap-12"
      >
        {limitedEntries.map((product) => (
          <div class="w-[70%] sm:w-[50%] md:w-auto flex-shrink-0 md:flex-shrink">
            <ProductCard product={product} />
          </div>
        ))}
      </div>
    ) : (
      <div class="text-center py-12">
        <p class="text-gray-500 dark:text-gray-400 text-lg">
          Tidak ada produk yang tersedia saat ini.
        </p>
      </div>
    )}
  </div>
</section>