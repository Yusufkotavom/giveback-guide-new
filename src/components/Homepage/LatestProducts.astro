---
// filepath: /Users/matthewmorelli/Documents/Dev/giveback-guide/src/components/Homepage/LatestProducts.astro

import { getCollection } from "astro:content";
import ProductCard from "../ProductCard.astro";
import PCountryDropdown from "../PCountryDropdown.astro";

// Props: limit specifies the number of products to display
interface Props {
  limit: number;
}

const { limit } = Astro.props;

// Helper function to parse dates in dd/mm/yyyy format
function parseDate(dateStr: string): Date {
  const [day, month, year] = dateStr.split("/");
  return new Date(`${year}-${month}-${day}`);
}

// Fetch products from the content collection
const entries = await getCollection("products");

// Sort products by pPublished date (descending order)
const sortedEntries = entries
  .map((entry) => ({
    ...entry,
    data: {
      ...entry.data,
      properties: {
        ...entry.data.properties,
        pImageURL1: entry.data.properties.pImageURL1 || "",
        pVerify: entry.data.properties.pVerify || "",
        pPrice: (entry.data.properties as any).pPrice || "",
      },
    },
  }))
  .sort((a, b) => {
    const dateA = a.data.properties.pPublished?.start 
      ? (typeof a.data.properties.pPublished.start === 'string' 
          ? parseDate(a.data.properties.pPublished.start) 
          : a.data.properties.pPublished.start) 
      : new Date(0);
    const dateB = b.data.properties.pPublished?.start 
      ? (typeof b.data.properties.pPublished.start === 'string' 
          ? parseDate(b.data.properties.pPublished.start) 
          : b.data.properties.pPublished.start) 
      : new Date(0);
    return dateB.getTime() - dateA.getTime(); // Most recent first
  });

// Limit the number of products based on the limit prop
const limitedEntries = sortedEntries.slice(0, limit);
---

<section class="bg-white dark:bg-gray-900">
  <div class="py-8 px-4 mx-auto max-w-screen-xl sm:py-16 lg:px-6">
    <div class="mb-8">
      <h2
        class="mb-4 text-4xl tracking-tight font-extrabold text-gray-900 dark:text-white"
      >
        Jelajahi Produk
      </h2>
      <div
        class="flex flex-row flex-wrap"
      >
      <div class="w-full md:w-auto md:grow">
        <p class="text-gray-500 sm:text-xl dark:text-gray-400 mb-4">Telusuri produk-produk terbaru, pilih negara atau lihat semua produk.</p>
        </div>
        <div class="flex w-full md:w-auto flex-row nowrap gap-4">
          <div class="grow md:grow-0">
            <PCountryDropdown />
          </div>
        <div class="grow md:grow-0">
          <a
            href="/products"
            class="inline-flex items-center w-full justify-center px-4 py-2.5 border border-gray-300 text-gray-900 text-sm rounded-lg hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:outline-none focus:ring-gray-100 focus:text-blue-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700 dark:focus:ring-gray-700"
          >
            Semua Produk
            <svg
              class="w-5 h-5 ml-2.5"
              aria-hidden="true"
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              fill="none"
              viewBox="0 0 24 24"
            >
              <path
                stroke="currentColor"
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M19 12H5m14 0-4 4m4-4-4-4"></path>
            </svg>
          </a>
        </div>
        </div>
      </div>
    </div>
    <div
      class="flex flex-row overflow-x-auto hide-scrollbar space-x-4 md:space-x-0 md:space-y-0 md:grid md:grid-cols-2 lg:grid-cols-3 md:gap-12"
    >
      {
        limitedEntries.map((product) => (
          <div class="w-[70%] sm:w-[50%] md:w-auto flex-shrink-0 md:flex-shrink">
            <ProductCard product={product} />
          </div>
        ))
      }
    </div>
  </div>
</section>