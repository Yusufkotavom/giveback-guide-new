---
// filepath: /Users/matthewmorelli/Documents/Dev/giveback-guide/src/components/LatestProjects.astro

import { getCollection } from "astro:content";
import ProjectCard from "../ProjectCard.astro";
import PCountryDropdown from "../PCountryDropdown.astro";

// Props: limit specifies the number of projects to display
interface Props {
  limit: number;
}

const { limit } = Astro.props;

// Helper function to parse dates in dd/mm/yyyy format
function parseDate(dateStr: string): Date {
  const [day, month, year] = dateStr.split("/");
  return new Date(`${year}-${month}-${day}`);
}

// Fetch projects from both Notion and MDX collections
const notionProjects = await getCollection("projects");
const mdxProjects = await getCollection("projectsMdx");

// Normalize Notion projects to match expected structure
const normalizedNotionProjects = notionProjects.map((entry) => ({
  ...entry,
  source: 'notion',
  data: {
    ...entry.data,
    properties: {
      ...entry.data.properties,
      pImageURL: entry.data.properties.pImageURL || "", // Ensure pImageURL is a string
      pVerify: entry.data.properties.pVerify || "", // Ensure pVerify is a string
    },
  },
}));

// Normalize MDX projects to match Notion structure
const normalizedMdxProjects = mdxProjects.map((entry) => ({
  ...entry,
  source: 'mdx',
  data: {
    ...entry.data,
    properties: {
      pTitle: entry.data.title,
      pCountry: entry.data.country,
      pLocale: entry.data.locale,
      pCategory: entry.data.category,
      pOrganiser: entry.data.organiser,
      pSlug: entry.data.slug,
      pCost: entry.data.cost,
      pURL: entry.data.url,
      pGYGURL: entry.data.gygUrl,
      pMapsURL: entry.data.mapsUrl,
      pVerify: entry.data.verify || "",
      pImageURL: entry.data.imageUrl || "",
      pPublished: { start: entry.data.published },
      pReview: entry.data.review,
      pGetInvolved: entry.data.getInvolved,
    },
  },
}));

// Combine both collections
const allProjects = [...normalizedNotionProjects, ...normalizedMdxProjects];

// Sort projects by pPublished date (descending order)
const sortedEntries = allProjects.sort((a, b) => {
  const dateA = a.data.properties.pPublished
    ? a.data.properties.pPublished.start
    : new Date(0); // Fallback to epoch if date is missing
  const dateB = b.data.properties.pPublished
    ? b.data.properties.pPublished.start
    : new Date(0); // Fallback to epoch if date is missing
  return dateB.getTime() - dateA.getTime(); // Most recent first
});

// Limit the number of projects based on the limit prop
const limitedEntries = sortedEntries.slice(0, limit);
---

<section class="bg-white dark:bg-gray-900">
  <div class="py-8 px-4 mx-auto max-w-screen-xl sm:py-16 lg:px-6">
    <div class="flex flex-col items-start justify-between p-2 space-y-3 md:flex-row md:space-y-0 mb-4">
      <div class="max-w-screen-md">
        <h2
          class="mb-4 text-4xl tracking-tight font-extrabold text-gray-900 dark:text-white"
        >
          Latest Projects
        </h2>
        <p class="text-gray-500 sm:text-xl dark:text-gray-400">
          Discover meaningful volunteer opportunities and social impact projects around the world.
        </p>
      </div>
      <div
        id="3"
        class="w-full md:w-1/4 p-2 order-2 md:order-3"
      >
        <PCountryDropdown />
      </div>
    </div>
    <div
      class="flex flex-row overflow-x-auto hide-scrollbar space-x-4 md:space-x-0 md:space-y-0 md:grid md:grid-cols-2 lg:grid-cols-3 md:gap-12"
    >
      {limitedEntries.map((project) => (
        <div class="w-[70%] sm:w-[50%] md:w-auto flex-shrink-0 md:flex-shrink">
          <ProjectCard post={project} />
        </div>
      ))}
    </div>
  </div>
</section>
