---
import { getCollection } from "astro:content";

// Get the current country from the URL
const currentCountryPromise = (async () => {
  const pathSegments = Astro.url.pathname.split("/");
  const potentialCountry = pathSegments[2]; // Extract the country slug from the URL

  // Validate if the extracted segment matches a known country slug
  const products = await getCollection("products");
  const validCountries = products.reduce((acc: Set<string>, product) => {
    const countries = Array.isArray(product.data.properties.pCountry)
      ? product.data.properties.pCountry.map((c) =>
          c.toLowerCase().replace(/\s+/g, "-")
        )
      : [String(product.data.properties.pCountry).toLowerCase().replace(/\s+/g, "-")];
    countries.forEach((country) => acc.add(country));
    return acc;
  }, new Set<string>());

  return validCountries.has(potentialCountry) ? potentialCountry : null;
})();
const currentCountry = await currentCountryPromise;

const products = await getCollection("products");

// Count the number of products for each country
const countryCounts = products.reduce((acc: Record<string, number>, product) => {
  const countries = Array.isArray(product.data.properties.pCountry)
    ? product.data.properties.pCountry
    : [product.data.properties.pCountry];

  countries.forEach((country) => {
    if (country) {
      acc[country] = (acc[country] || 0) + 1;
    }
  });

  return acc;
}, {});

// Extract unique countries and sort alphabetically
const uniqueCountries = Object.keys(countryCounts).sort();
---
<form class="w-100%">
  <select
    id="countries"
    class="bg-white border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
    onchange="if (this.value) window.location.href = this.value"
  >
    <option disabled selected={!currentCountry}>Negara</option>
    {uniqueCountries.map((country) => {
      const countrySlug = country.toLowerCase().replace(/\s+/g, "-");
      return (
        <option
          value={`/products/${countrySlug}`}
          selected={currentCountry === countrySlug}
        >
          {country} ({countryCounts[country]})
        </option>
      );
    })}
  </select>
</form>